[gd_scene load_steps=8 format=2]

[ext_resource path="res://Scripts/StateMachine.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
resource_name = "Normal"
script/source = "extends Node

var fsm: StateMachine

onready var CrateDetectorRight : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorRight\", false)
onready var CrateDetectorLeft : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorLeft\", false)
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var ground_area: Area2D = get_parent().get_parent().find_node(\"GroundArea\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")
onready var platform_detector_corner_left : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerLeft\")
onready var platform_detector_corner_right : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerRight\")
onready var _player : KinematicBody2D = get_parent().get_parent()
onready var _audio_walk : AudioStreamPlayer2D = _player.find_node(\"AudioWalk\")
onready var _audio_idle : AudioStreamPlayer2D = _player.find_node(\"AudioIdle\")
onready var _audio_action : AudioStreamPlayer2D = _player.find_node(\"AudioAction\")
onready var _audio_drifting : AudioStreamPlayer2D = _player.find_node(\"AudioDrifting\")
onready var _audio_skid : AudioStreamPlayer2D = _player.find_node(\"AudioSkid\")
onready var _ghost_ladder : Node2D = _player.find_node(\"GhostLadder\")
var _old_velocity = Vector2.ZERO
var _back_timer = 0
var _back_timer_total = 0.4

onready var camera : Camera2D = _player.find_node(\"Camera2D\", false)

func _ready():
	Events.connect(\"rope_thrown_signal\", self, \"_on_rope_thrown_signal\")
	Events.connect(\"ladder_placed_signal\", self, \"_on_object_placed\")

func enter(args : Array):
	platform_detector = fsm.player.find_node(\"PlatformDetector\")
	platform_detector_corner_left = fsm.player.find_node(\"PlatformDetectorCornerLeft\")
	platform_detector_corner_right = fsm.player.find_node(\"PlatformDetectorCornerRight\")
	_old_velocity = Vector2.ZERO

func physics_process(delta):
	var velocity = _player.velocity
	var snap = platform_detector.cast_to

	var direction = Vector2.ZERO
	if Input.is_action_pressed(\"ui_right\"):
		direction = Vector2.RIGHT 
	elif Input.is_action_pressed(\"ui_left\"):
		direction = Vector2.LEFT
		
	var is_colliding_to_platform = _player.is_colliding_to_platform()
		
	if is_colliding_to_platform:
		velocity = _compute_lateral_velocity(velocity, direction)

		if Input.is_action_pressed(\"ui_down\"):
			if camera.position.y < 150:
				camera.position.y += delta * _player.camera_speed.y
		elif Input.is_action_pressed(\"ui_up\") :
			if camera.position.y > -150:
				camera.position.y -= delta * _player.camera_speed.y
		else:
			camera.position.y = 0
			
	_resolve_collisions(velocity, is_colliding_to_platform)
	
	_update_animation(velocity)
	
	if _back_timer - delta <= 0 and _back_timer != 0 and !_audio_drifting.is_playing() and randi() % 1000 < 100:
		_audio_drifting.play()
	_back_timer = max(_back_timer - delta, 0)
	
	if Input.is_action_just_pressed(\"ui_select\") and is_colliding_to_platform:
		snap = Vector2.ZERO
		velocity.y = _player.jump_impulse.y
		_player.velocity = _player.integrate(delta, velocity)
		_back_timer = 0
		_reset()
		fsm.change_to(\"Jumping\", [])
		
	if !is_colliding_to_platform && velocity.y > 0:
		_back_timer = 0
		_reset()
		fsm.change_to(\"Jumping\", [])

	_player.velocity = _player.integrate_with_snap(delta, velocity, snap)
	_old_velocity = velocity
	
func _compute_lateral_velocity(velocity : Vector2, direction : Vector2):
	if sign(velocity.x) != sign(direction.x) and abs(velocity.x) > _player.speed.x/2 and _back_timer == 0:
		_back_timer = _back_timer_total
		velocity.x = -direction.x * _player.speed.x
	elif sign(velocity.x) != sign(direction.x) and _back_timer > 0:
		velocity.x = -direction.x * _player.speed.x * _back_timer / _back_timer_total
	elif sign(velocity.x) == sign(direction.x) and _back_timer > 0:
		_back_timer = 0
		velocity.x = direction.x * _player.speed.x
	else:
		velocity.x = direction.x * _player.speed.x
		
	return velocity
	
func _update_animation(velocity : Vector2):
	_ghost_ladder.hide()
	var animated_sprite = fsm.animated_sprite
	
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true
	
	if _back_timer > 0:
		animated_sprite.play(\"Back\")
		if not _audio_skid.is_playing():
			_audio_skid.play()
	elif velocity.x != 0 :
		animated_sprite.play(\"Walking\")
		_audio_skid.stop()
		
		if(animated_sprite.frame == 3 or animated_sprite.frame == 10 or animated_sprite.frame == 20):
			_audio_idle.stop()
			_audio_walk.play()
	elif _back_timer <= 0 :
		animated_sprite.play(\"Idle\")
		if _player.is_using_ladder() and not is_above(\"Boxes\"):
			_ghost_ladder.show()
		_audio_skid.stop()
		if not _audio_idle.is_playing() and randi() % 1000 < 5:
			_audio_idle.play()
			
	if _back_timer > 0 or velocity.x != 0:
		_audio_idle.stop()
		
func _resolve_collisions(velocity : Vector2, is_colliding_to_platform : bool):
	if is_colliding_to_platform:
		if (CrateDetectorRight.is_colliding() and velocity.x > 0) \\
		or (CrateDetectorLeft.is_colliding() and velocity.x < 0):
			_reset()
			fsm.change_to(\"PushingCrates\", [])
			
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			_reset()
			fsm.change_to(\"ClimbingLadder\", [area])

	for area in ground_area.get_overlapping_areas():
		if (area.is_in_group(\"TopRopes\") and Input.is_action_just_pressed(\"ui_down\")) :
			_reset()
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene(), true])
			
	for area in center.get_overlapping_areas():
		if area.is_in_group(\"Ropes\") and Input.is_action_pressed(\"ui_up\"):
#			Events.emit_signal(\"rope_handled\", fsm.velocity)
			_reset()
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene(), false])
			
func _reset():
	_back_timer = 0
	_audio_idle.stop()
	_audio_walk.stop()
	_audio_skid.stop()
	_ghost_ladder.hide()

func _on_rope_thrown_signal(area):
	_back_timer = 0
	fsm.change_to(\"ThrowingRope\", [area])
	_audio_action.play()

func is_above(group: String):
	return platform_detector.is_colliding() and platform_detector.get_collider().is_in_group(group) or \\
		   platform_detector_corner_left.is_colliding() and platform_detector_corner_left.get_collider().is_in_group(group) or \\
		   platform_detector_corner_right.is_colliding() and platform_detector_corner_right.get_collider().is_in_group(group) 

func _on_Area2D_area_entered(area):
	if area.is_in_group(\"Ropes\"):
		Events.emit_signal(\"rope_handled_signal\", fsm.player.velocity)
		_reset()
		fsm.change_to(\"ClimbingRope\", [area.get_root_scene(), false])
		
func _on_object_placed():
	_audio_action.play()
"

[sub_resource type="GDScript" id=2]
resource_name = "ClimbingRope"
script/source = "extends Node

var fsm: StateMachine

var _rope : Node2D
onready var _player : KinematicBody2D = get_parent().get_parent()
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var ground_area: Area2D = get_parent().get_parent().find_node(\"GroundArea\", false)
onready var tween: Tween = get_parent().get_parent().find_node(\"Tween\", false)

var _old_position_animation_x : float
var _lateral_direction = 0

func enter(args : Array):
	_rope = args[0]
	var is_from_up = args[1]
	var line2D = _rope.find_node(\"Line2D\")
	if is_from_up:
		var animated_sprite = fsm.animated_sprite
		var animated_player : AnimationPlayer = _player.find_node(\"AnimationPlayer\")
		get_parent().set_physics_process(false)
		animated_player.play(\"teleport\")
		yield(animated_player, \"animation_finished\")
		var tp_position = line2D.global_position + Vector2.DOWN * 30
		_player.global_position = tp_position
		animated_sprite.play(\"ClimbingRopeDown\")
		animated_player.play_backwards(\"teleport\")
		yield(animated_player, \"animation_finished\")
		get_parent().set_physics_process(true)
	else:
		_player.global_position.x = line2D.global_position.x
	_player.find_node(\"CollisionShape2D\").disabled = true
	_old_position_animation_x = fsm.animated_sprite.position.x

func physics_process(delta):
	var velocity = _player.velocity
	velocity.x = 0
	if Input.is_action_pressed(\"ui_up\"):
		velocity += _player.climbing_up_speed
	if Input.is_action_pressed(\"ui_down\"):
		velocity += _player.climbing_down_speed
	
	var lateral_direction = 0
	if Input.is_action_pressed(\"ui_left\"):
		lateral_direction = -1
	if Input.is_action_pressed(\"ui_right\"):
		lateral_direction = 1
		
	_update_animation(velocity, lateral_direction)
	
	_resolve_collision()
	
	if Input.is_action_pressed(\"ui_down\") and is_down_rope():
		velocity.y = 0
		
	_player.velocity = _player.integrate_without_gravity(velocity)

	_player.velocity.y = 0
	_lateral_direction = 0
	
func _update_animation(velocity : Vector2, lateral_direction : float):
	var animated_sprite = fsm.animated_sprite
	
	if velocity.y < 0 and animated_sprite.animation != \"ClimbingRopeUp\":
		animated_sprite.play(\"ClimbingRopeUp\")
	elif velocity.y > 0 and animated_sprite.animation != \"ClimbingRopeDown\":
		animated_sprite.play(\"ClimbingRopeDown\")
	elif velocity.y == 0 and animated_sprite.animation != \"ClimbingRopeIdle\":
		animated_sprite.play(\"ClimbingRopeIdle\")
		
	if lateral_direction < 0:
		animated_sprite.flip_h=false
		
	elif lateral_direction > 0:
		animated_sprite.flip_h=true
	
	animated_sprite.position.x = _old_position_animation_x + _get_offset_animation()
	
func _get_offset_animation():
	var animated_sprite = fsm.animated_sprite
	var flip = animated_sprite.flip_h
	if animated_sprite.animation == \"ClimbingRopeIdle\":
		return 17 if flip else -17
	if animated_sprite.animation == \"ClimbingRopeUp\":
		return 11 if flip else -11
	if animated_sprite.animation == \"ClimbingRopeDown\":
		return 17 if flip else -17
	return 0
		
func _resolve_collision():
	if Input.is_action_just_pressed(\"ui_select\"):
		_player.find_node(\"CollisionShape2D\").disabled = false
		fsm.animated_sprite.position.x = _old_position_animation_x
		fsm.change_to(\"Normal\", [])
		
	for area in center.get_overlapping_areas():
		if center.get_overlapping_areas().size()\\
		 and area.is_in_group(\"TopRopes\") \\
		and Input.is_action_pressed(\"ui_up\"):
			var animated_sprite = fsm.animated_sprite
			var animated_player : AnimationPlayer = _player.find_node(\"AnimationPlayer\")
			get_parent().set_physics_process(false)
			animated_player.play(\"teleport\")
			yield(animated_player, \"animation_finished\")
			var tp_position = _rope.get_tp_position() - Vector2(0, _player.get_tall())
			_player.position = tp_position
			animated_sprite.play(\"Idle\")
			animated_player.play_backwards(\"teleport\")
			yield(animated_player, \"animation_finished\")
			get_parent().set_physics_process(true)
			_player.find_node(\"CollisionShape2D\").disabled = false
			fsm.animated_sprite.position.x = _old_position_animation_x
			fsm.change_to(\"Normal\", [])
	for area in ground_area.get_overlapping_areas():
		if area.is_in_group(\"BottomRopes\") \\
		and !Input.is_action_pressed(\"ui_up\")\\
		and _player.is_colliding_to_platform():
			_player.find_node(\"CollisionShape2D\").disabled = false
			fsm.animated_sprite.position.x = _old_position_animation_x
			fsm.change_to(\"Normal\", [])
			
func is_down_rope():
	for area in ground_area.get_overlapping_areas():
		if area.is_in_group(\"BottomRopes\"):
			return true
	return false
"

[sub_resource type="GDScript" id=3]
resource_name = "ThrowingRope"
script/source = "extends Node

var fsm: StateMachine

onready var _player : KinematicBody2D = get_parent().get_parent()
onready var _audioAction : AudioStreamPlayer2D = _player.find_node(\"AudioAction\")

#expects rope node
func enter(args : Array):
	args[0].disable()
	yield(get_tree().create_timer(0.6), \"timeout\")
	_audioAction.play()
	fsm.change_to(\"Normal\", [])
	
func _update_animation(right : bool):
	var animated_sprite = _player.animated_sprite
	if right:
		animated_sprite.flip_h=false
	elif not right:
		animated_sprite.flip_h=true
		
	animated_sprite.play(\"ClimbingPlatform\")

func physics_process(delta):
	pass
"

[sub_resource type="GDScript" id=4]
resource_name = "ClimbingLadder"
script/source = "extends Node

var fsm: StateMachine

var _ladder_area : Area2D

onready var _player : KinematicBody2D = get_parent().get_parent()
onready var _audio_ladder : AudioStreamPlayer2D = _player.find_node(\"AudioLadder\")
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)

func enter(args : Array):
	_player.velocity.x = 0
	_ladder_area = args[0]
	_ladder_area.connect(\"area_exited\", self, \"_on_Area2D_area_exited\", [], CONNECT_ONESHOT)
	
func is_reaching_top():
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and area.name == \"Top\":
			return true
	return false
	
func physics_process(delta):
	var velocity = _player.velocity
	if Input.is_action_pressed(\"ui_up\") and not is_reaching_top():
		velocity.y += _player.climbing_up_speed.y
	elif Input.is_action_pressed(\"ui_down\"):
		velocity.y += _player.climbing_down_speed.y
	
	if Input.is_action_pressed(\"ui_right\"):
		velocity.x = _player.speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		velocity.x = -_player.speed.x
	else:
		velocity.x = 0
	
	_player.velocity = _player.integrate_without_gravity(velocity)
	
	_update_animation(_player.velocity)
	
	if Input.is_action_just_pressed(\"ui_select\"):
		_player.velocity.y = _player.jump_impulse.y
		fsm.change_to(\"Jumping\", [])
	else:
		_player.velocity.y = 0
		
	if _player.is_colliding_to_platform() and Input.is_action_pressed(\"ui_down\"):
		fsm.change_to(\"Normal\", [])

func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true
		
	if velocity.y < 0 and animated_sprite.animation != \"ClimbingLadderUp\":
		animated_sprite.play(\"ClimbingLadderUp\")
	elif velocity.y > 0 and animated_sprite.animation != \"ClimbingLadderDown\":
		animated_sprite.play(\"ClimbingLadderDown\")
	elif velocity.y == 0 and animated_sprite.animation != \"ClimbingLadderIdle\":
		animated_sprite.play(\"ClimbingLadderIdle\")
		
	if animated_sprite.animation == \"ClimbingLadderUp\" and \\
	(animated_sprite.frame == 1 or animated_sprite.frame == 8 or animated_sprite.frame == 16 or animated_sprite.frame == 24):
		_audio_ladder.stop()
		_audio_ladder.play()

func _on_Area2D_area_exited(area):
	fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=5]
resource_name = "PushingCrates"
script/source = "extends Node

var fsm: StateMachine

onready var CrateDetectorRight : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorRight\", false)
onready var CrateDetectorLeft : RayCast2D = get_parent().get_parent().find_node(\"CrateDetectorLeft\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var _player : KinematicBody2D = get_parent().get_parent()
var _old_velocity = Vector2.ZERO

func enter(args : Array):
	pass
	
func physics_process(delta):
	var snap = platform_detector.cast_to
	var velocity = _player.velocity
	if Input.is_action_just_pressed(\"ui_select\") and platform_detector.is_colliding():
		snap = Vector2.ZERO
		velocity.y = _player.jump_impulse.y
		_player.velocity = _player.integrate(delta, velocity)
		fsm.change_to(\"Jumping\", [])
	
	if Input.is_action_pressed(\"ui_right\"):
		velocity.x = _player.speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		velocity.x= -_player.speed.x
	
	if platform_detector.is_colliding():
		if CrateDetectorRight.is_colliding():
			var object = CrateDetectorRight.get_collider()
			if object.is_in_group(\"Boxes\") and velocity.x > 0:
					object.push(velocity / 3.0)
		if CrateDetectorLeft.is_colliding():
			var object = CrateDetectorLeft.get_collider()
			if object.is_in_group(\"Boxes\")  and velocity.x < 0:
				object.push(velocity / 3.0)
	
	_player.velocity = _player.integrate_with_snap(delta, velocity, snap)
	
	_resolve_collision(velocity)

	_update_animation(velocity)


	
func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true

	if animated_sprite.animation != \"PushingCrate\":
		animated_sprite.play(\"PushingCrate\")
	
func _resolve_collision(velocity : Vector2):
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			fsm.change_to(\"ClimbingLadder\", [area])
	
	if (velocity.x < 0 and CrateDetectorRight.is_colliding()) \\
	or (velocity.x > 0 and CrateDetectorLeft.is_colliding()) \\
	or not CrateDetectorRight.is_colliding() and not CrateDetectorLeft.is_colliding() \\
	or velocity.x == 0:
		_player.velocity.x=0
		fsm.change_to(\"Normal\", [])
"

[sub_resource type="GDScript" id=6]
resource_name = "Jumping"
script/source = "extends Node

var fsm: StateMachine

onready var _player : KinematicBody2D = get_parent().get_parent()
onready var center: Area2D = get_parent().get_parent().find_node(\"Area2D\", false)
onready var platform_detector : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetector\")
onready var platform_detector_corner_left : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerLeft\")
onready var platform_detector_corner_right : RayCast2D = get_parent().get_parent().find_node(\"PlatformDetectorCornerRight\")

func is_colliding_to_platform():
	return platform_detector.is_colliding()              or \\
		   platform_detector_corner_left.is_colliding()  or \\
		   platform_detector_corner_right.is_colliding()

func enter(args : Array):
	platform_detector = fsm.player.find_node(\"PlatformDetector\")
	platform_detector_corner_left = fsm.player.find_node(\"PlatformDetectorCornerLeft\")
	platform_detector_corner_right = fsm.player.find_node(\"PlatformDetectorCornerRight\")

func physics_process(delta):
	var velocity = _player.velocity
	if Input.is_action_just_released(\"ui_select\"):
		velocity.y *= _player.interrupt_jump_factor

	if Input.is_action_pressed(\"ui_right\"):
		velocity.x = _player.jump_speed.x
	elif Input.is_action_pressed(\"ui_left\"):
		velocity.x= -_player.jump_speed.x
	else:
		velocity.x=0
		
	_resolve_collisions(velocity)
	
	_update_animation(velocity)

	_player.velocity = _player.integrate(delta, velocity)


	
func _update_animation(velocity : Vector2):
	var animated_sprite = fsm.animated_sprite
	if velocity.x > 0:
		animated_sprite.flip_h=false
	elif velocity.x < 0:
		animated_sprite.flip_h=true

	if velocity.y < 0 and animated_sprite.animation != \"JumpingUp\":
		animated_sprite.play(\"JumpingUp\")
	elif velocity.y > 0 and animated_sprite.animation != \"JumpingDown\":
		animated_sprite.play(\"JumpingDown\")

func _resolve_collisions(velocity : Vector2):
	for area in center.get_overlapping_areas():
		if area.get_parent().is_in_group(\"Ladders\") \\
			and (Input.is_action_just_pressed(\"ui_up\") \\
			or Input.is_action_just_pressed(\"ui_down\")):
			fsm.change_to(\"ClimbingLadder\", [area])

	for area in center.get_overlapping_areas():
		if area.is_in_group(\"Ropes\") and Input.is_action_pressed(\"ui_up\"):
#			Events.emit_signal(\"rope_handled\", fsm.velocity)
			fsm.change_to(\"ClimbingRope\", [area.get_root_scene(), false])
	if is_colliding_to_platform() and velocity.y >= 0:
		fsm.change_to(\"Normal\", [])
"

[node name="States" type="Node"]
script = ExtResource( 1 )

[node name="Normal" type="Node" parent="."]
script = SubResource( 1 )

[node name="ClimbingRope" type="Node" parent="."]
script = SubResource( 2 )

[node name="ThrowingRope" type="Node" parent="."]
script = SubResource( 3 )

[node name="ClimbingLadder" type="Node" parent="."]
script = SubResource( 4 )

[node name="PushingCrates" type="Node" parent="."]
script = SubResource( 5 )

[node name="Jumping" type="Node" parent="."]
script = SubResource( 6 )
